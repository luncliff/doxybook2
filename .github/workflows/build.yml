name: build
on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: 'Windows x64'
            os: windows-latest
            triplet: x64-windows
            suffix: 'windows-win64'
          - name: 'Linux x64'
            os: ubuntu-latest
            triplet: x64-linux
            suffix: 'linux-amd64'
          - name: 'Mac OSX x64'
            os: macos-latest
            triplet: x64-osx
            suffix: 'osx-amd64'
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: "Run apt"
        if: runner.os == 'Linux'
        run: sudo apt install -y pkg-config ninja-build

      - name: "Run homebrew"
        if: runner.os == 'macOS'
        run: brew install ninja

      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: "${{ runner.tool_cache }}/vcpkg"
          vcpkgGitCommitId: "6f29f12e82a8293156836ad81cc9bf5af41fe836" # 2025.01.13
          runVcpkgInstall: true
          vcpkgJsonGlob: 'vcpkg.json'

      - uses: lukka/run-cmake@v10
        with:
          workflowPreset: ${{ matrix.suffix }}

      - name: "Run cmake(install)"
        run: |
          cmake --build --preset "${{ matrix.triplet }}-debug" --target install

      - name: "List runtime dependencies(Linux)"
        if: runner.os == 'Linux'
        run: |
          file install/bin/doxybook2
          ldd install/bin/doxybook2

      - name: "List runtime dependencies(macOS)"
        if: runner.os == 'macOS'
        run: |
          file install/bin/doxybook2
          otool -L install/bin/doxybook2

      - uses: actions/upload-artifact@v4
        with:
          name: "artifact-${{ matrix.suffix }}"
          path: install
          retention-days: 2

  pages:
    if: ${{ false }}
    name: Pages
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Dependencies
        shell: bash
        run: |
          sudo apt-get install zip unzip python3-setuptools -y
          mkdir -p ${{ github.workspace }}/public

      - name: Download Node
        uses: actions/setup-node@v1
        with:
          node-version: 8.x

      - name: Download Hugo
        shell: bash
        run: |
          wget https://github.com/gohugoio/hugo/releases/download/v0.74.1/hugo_extended_0.74.1_Linux-64bit.tar.gz
          tar xvf hugo_extended_0.74.1_Linux-64bit.tar.gz
          sudo mv ./hugo /usr/local/bin/hugo
          sudo chmod +x /usr/local/bin/hugo
          hugo version

      - name: Download MkDocs
        shell: bash
        run: |
          sudo python3 -m pip install mkdocs mkdocs-material mkdocs-bootswatch

# Disabled due to VuePress not supporting Vue 3.x
#      - name: Download VuePress
#        shell: bash
#        run: |
#          sudo npm install vuepress vue-template-compiler -g

      - name: Download GitBook CLI
        shell: bash
        run: |
          sudo npm install gitbook-cli -g

      - name: Download Doxygen
        shell: bash
        run: |
          wget https://netcologne.dl.sourceforge.net/project/doxygen/rel-1.8.17/doxygen-1.8.17.linux.bin.tar.gz
          tar -xvzf doxygen-1.8.17.linux.bin.tar.gz
          sudo cp ./doxygen-1.8.17/bin/doxygen /usr/local/bin/doxygen
          sudo chmod +x /usr/local/bin/doxygen

      - uses: actions/download-artifact@v2
        with:
          name: Release
          path: /tmp/release

      - name: Install Doxybook2
        shell: bash
        run: |
          file=$(ls /tmp/release | grep linux)
          unzip "/tmp/release/$file" -d /tmp/doxybook2
          sudo cp /tmp/doxybook2/bin/doxybook2 /usr/local/bin/doxybook2
          sudo chmod +x /usr/local/bin/doxybook2
          doxybook2 --version

      - name: Run Doxygen
        shell: bash
        run: |
          cd example
          doxygen

      - name: MkDocs - ReadTheDocs
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/mkdocs-readthedocs/docs \
            --config ./example/mkdocs-readthedocs/.doxybook/config.json
          cd ./example/mkdocs-readthedocs
          mkdocs build
          cp -r ./site ${{ github.workspace }}/public/mkdocs-readthedocs

      - name: MkDocs - Material
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/mkdocs-material/docs \
            --config ./example/mkdocs-material/.doxybook/config.json
          cd ./example/mkdocs-material
          mkdocs build
          cp -r ./site ${{ github.workspace }}/public/mkdocs-material

      - name: MkDocs - Bootswatch
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/mkdocs-bootswatch/docs \
            --config ./example/mkdocs-bootswatch/.doxybook/config.json
          cd ./example/mkdocs-bootswatch
          mkdocs build
          cp -r ./site ${{ github.workspace }}/public/mkdocs-bootswatch

      - name: Hugo - Learn
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/hugo-learn/content \
            --config ./example/hugo-learn/.doxybook/config.json \
            --templates ./example/hugo-learn/.doxybook/templates
          cd ./example/hugo-learn
          hugo
          cp -r ./public ${{ github.workspace }}/public/hugo-learn

      - name: Hugo - Book
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/hugo-book/content \
            --config ./example/hugo-book/.doxybook/config.json \
            --templates ./example/hugo-book/.doxybook/templates
          cd ./example/hugo-book
          hugo
          cp -r ./public ${{ github.workspace }}/public/hugo-book

# Disabled due to VuePress not supporting Vue 3.x
#      - name: VuePress - Default
#        shell: bash
#        run: |
#          doxybook2 \
#            --input ./example/doxygen/xml \
#            --output ./example/vuepress \
#            --config ./example/vuepress/.doxybook/config.json
#          cd ./example/vuepress
#          sudo vuepress build
#          cp -r ./.vuepress/dist ${{ github.workspace }}/public/vuepress

      - name: GitBook - Default
        shell: bash
        run: |
          doxybook2 \
            --input ./example/doxygen/xml \
            --output ./example/gitbook \
            --config ./example/gitbook/.doxybook/config.json \
            --summary-input ./example/gitbook/SUMMARY.md.tmpl \
            --summary-output ./example/gitbook/SUMMARY.md
          cd ./example/gitbook
          gitbook build
          cp -r ./_book ${{ github.workspace }}/public/gitbook

      - name: Additional files
        shell: bash
        run: |
          cp ./example/index.html ${{ github.workspace }}/public/index.html
          cp -r ./example/doxygen/html ${{ github.workspace }}/public/original
          stat ${{ github.workspace }}/public

      - name: Deploy
        if: startsWith(github.ref, 'refs/heads/master')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/public
